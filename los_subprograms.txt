create or replace NONEDITIONABLE trigger tr_actualizar_prestacion_incapcidad
after insert 
on citt
for each row
declare 
    v_sueldo NUMBER;
    v_sueldo_dia NUMBER;
    v_inicio_descanso date;
    v_fin_descanso date;
    v_monto number;
    v_id_tipo_prestacion char(11);
begin
    select monto into v_monto from prestacion_economica 
    where :new.id_tipo_prestacion=id_tipo_prestacion;
    SELECT id_tipo_prestacion into v_id_tipo_prestacion FROM prestacion_economica where :new.id_tipo_prestacion=id_tipo_prestacion;
    select asegurado.sueldo into v_sueldo from asegurado where dni_asegurado=(Select solicitud.dni from solicitud where id_solicitud=(SELECT id_solicitud FROM prestacion_economica WHERE id_tipo_prestacion=v_id_tipo_prestacion));
    v_sueldo_dia:=v_sueldo/30;
    update prestacion_economica set monto=v_monto+:new.NUM_DIAS*v_sueldo_dia,
    inicio_subsidio=:new.INICIO_DESCANSO,fin_subsidio=:new.FIN_DESCANSO
    where :new.id_tipo_prestacion=id_tipo_prestacion;
end;
======================================================================================================

create or replace NONEDITIONABLE trigger tr_actualizar_prestacion_sepelio
after insert 
on boleta
for each row
declare
    v_monto number;
begin
    select monto into v_monto from prestacion_economica 
    where :new.id_tipo_prestacion=id_tipo_prestacion;
    if v_monto+:new.importe>=2070 then
        v_monto:=2070;
    else
        v_monto:=v_monto+:new.importe;
    end if;
    update prestacion_economica set monto=v_monto 
    where :new.id_tipo_prestacion=id_tipo_prestacion;
end;

===============================================================================================
create or replace NONEDITIONABLE trigger tr_actualizarMontoPrestacionMaternidad
after insert on maternidad
for each row
declare 
    v_sueldo number;
    v_sueldo_dia NUMBER;
    v_id_tipo_prestacion char(11);
    v_id_solicitud number;
begin
   v_id_tipo_prestacion:=:new.id_tipo_prestacion;
           
    select asegurado.sueldo into v_sueldo from asegurado where dni_asegurado=(Select solicitud.dni from solicitud where id_solicitud=(SELECT id_solicitud FROM prestacion_economica WHERE id_tipo_prestacion=v_id_tipo_prestacion));    
    v_sueldo_dia:=v_sueldo/30;
    update prestacion_economica set monto=v_sueldo_dia*98
    where :new.id_tipo_prestacion=id_tipo_prestacion;
end;
=================================================================================================
create or replace NONEDITIONABLE trigger tr_insertar_id_prestaciones
after insert
on prestacion_economica
for each row
begin
    case :new.tipo_prestacion
    when 'S' then insert into sepelio values (:new.id_tipo_prestacion);--sepelio
    when 'I' then insert into incapacidad_temporal values (:new.id_tipo_prestacion);--UPDATE ID_CITT
    when 'M' then NULL; 
    when 'L' then insert into lactancia (ID_TIPO_PRESTACION) values (:new.id_tipo_prestacion);
    end case;
end;
======================================================================================
create or replace NONEDITIONABLE trigger tr_validarCondicion
before insert on condicion
for each row
declare
    v_id_tipo_prestacion char:=:new.id_tipo_prestacion;
    v_id_solicitud number;
    v_tipo_prestacion char;
begin
    if :new.cumplimiento='D' then
    -- pks de las tablas
        select id_solicitud,tipo_prestacion into v_id_solicitud,v_tipo_prestacion
        from prestacion_economica where v_id_tipo_prestacion=id_tipo_prestacion;
        
        -- BORRAMOS EN SU RESPECTIVA TABLA DE ACUERDO AL TIPO DE PRESTACION
        case v_tipo_prestacion
        when 'S' then delete from sepelio where id_tipo_prestacion=v_id_tipo_prestacion;--crear trigger para eliminar boletas registradas
        when 'I' then delete from incapacidad_temporal where id_tipo_prestacion=v_id_tipo_prestacion;--crear trigger para eliminar citts registrados
        when 'L' then delete from lactancia where id_tipo_prestacion=v_id_tipo_prestacion;
        when 'M' then delete from maternidad where id_tipo_prestacion=v_id_tipo_prestacion;
        end case;
        -- BORRAMOS LA SOLICITUD Y SU PRESTACION ECONOMICA
        delete from solicitud where id_solicitud=v_id_solicitud;--se ejecuta trigger para borrar prestacion
        -- YA NO INSERTAMOS LA CONDICION PORQUE NO SE CUMPLE 
        raise_application_error(-2000,'No se cumple aguna condicion; por lo tanto, la solicitud no procede');
    end if;
end;
======================================================================================================================
create or replace NONEDITIONABLE procedure pr_insertarCitt(p_id_citt in number, p_id_tipo_prestacion in char,p_inicio_descanso in date,
                                            p_fin_descanso in date)
is
    v_num_dias number;
    fechas_invalidas exception;
    max_dias exception;
begin
    v_num_dias:=trunc(p_fin_descanso)-trunc(p_inicio_descanso);
    if v_num_dias<0 then
        raise fechas_invalidas;
    end if;
    if v_num_dias>30 then
        raise max_dias;
    end if;
    insert into citt (id_citt,id_tipo_prestacion,inicio_descanso,fin_descanso,num_dias)
    values(p_id_citt,p_id_tipo_prestacion,p_inicio_descanso,p_fin_descanso,v_num_dias);
exception
    when fechas_invalidas then
        dbms_output.put_line('No se procesar la solicitud: La fecha de descanso final debe ser mayor a la incial.');
    when max_dias then
        dbms_output.put_line('La maxima cantidad de dias que se puede otroga de descaso en un CITT son 30 dis calendario,
        si requiere mas dias solicitar otro CITT usted ha solicitado '||v_num_dias||' dias');
end;
======================================================================================================================
create or replace NONEDITIONABLE procedure pr_lactancia_maternidad(p_tipo_prestacion in char,p_id_solicitud in number,p_certificado_nacimiento in date)
is
   v_monto number:=0;
    v_fin_subsidio date:=sysdate;--FALTA UPDATE
    v_inicio_subsidio date:=sysdate;
    tipo_prestacion_invalido exception;
    v_vinculo_laboral char;
    v_id_solicitud number;
    v_sol_char CHAR(10);
    v_id_tipo_prestacion char(11);
    solicitud_no_valida exception;
    cursor c_id_solicitud is select id_solicitud from solicitud;
begin
     v_sol_char := TO_CHAR(p_id_solicitud);
     v_id_tipo_prestacion:=p_tipo_prestacion || to_char(p_id_solicitud);
     -- validar solicitud
     open c_id_solicitud;
    loop
        fetch c_id_solicitud into v_id_solicitud;
        if c_id_solicitud%notfound then
            raise solicitud_no_valida;
            exit;
        end if;
        if v_id_solicitud=p_id_solicitud then
            exit;
        end if;
    end loop;
        close c_id_solicitud;
     if p_tipo_prestacion='M' then--FALTA ACTUALIZAR MONTO CON SULEDO 
        insert into prestacion_economica
        values (v_id_tipo_prestacion,p_id_solicitud,p_tipo_prestacion,v_monto,v_inicio_subsidio,v_fin_subsidio);
        
        insert into maternidad values(v_id_tipo_prestacion,p_certificado_nacimiento);
    elsif p_tipo_prestacion='L' then-- CREAR MONTO FIJO DADO POR EL GOBIENRO
        select tipo_solicitante into v_vinculo_laboral from solicitud where p_id_solicitud=id_solicitud;
        insert into prestacion_economica
        values (v_id_tipo_prestacion,p_id_solicitud,p_tipo_prestacion,820.00,v_inicio_subsidio,v_fin_subsidio);
        update lactancia set CERTIFICADO_NACIMIENTO=p_certificado_nacimiento,VINCULO_LABORAL=v_vinculo_laboral;
        else
        raise tipo_prestacion_invalido;
     end if;

exception
    when tipo_prestacion_invalido then
        dbms_output.put_line('No se procesa la solicitud: Ingrese un tipo de solicitud valido');
    when solicitud_no_valida then
        dbms_output.put_line('No se procesa la prestacion: Ingrese un ID DE SOLICITUD valido');
end;
======================================================================================================================
create or replace NONEDITIONABLE procedure pr_listadoPersonas
is
    cursor c_persona is select dni, tipo_solicitante, 
    nombres || ' ' || ape_pat || ' '||ape_mat nombreCompleto,
    fecha_nac, direccion,id_ubigeo from persona;

    cursor c_ubigeo(p_id_ubigeo number) is select id_departamento, id_provincia,
    id_distrito from ubigeo where p_id_ubigeo = id_ubigeo;

    cursor c_departamento ( p_id_departamento number) is select nombre from
    departamento where p_id_departamento = id_departamento;

    cursor c_provincia ( p_id_provincia number) is select nombre from
    provincia where p_id_provincia = id_provincia;

    cursor c_distrito ( p_id_distrito number) is select nombre from
    distrito where p_id_distrito = id_distrito;

    v_ubigeo number;
    v_provincia number;
    v_departamento number;
    v_distrito number;
    v_name_dpto varchar2(150);
    v_name_prv varchar2(150);
    v_name_dst varchar2(150);
    v_solicitante varchar2(15);
begin
    for list_persona in c_persona loop
        v_ubigeo := list_persona.id_ubigeo;
        for list_ubigeo in c_ubigeo(v_ubigeo) loop
            v_provincia := list_ubigeo.id_provincia;
            v_departamento := list_ubigeo. id_departamento;
            v_distrito := list_ubigeo.id_distrito;
            for list_departamento in c_departamento (v_departamento ) loop
                v_name_dpto := list_departamento.nombre;
            end loop;
            for list_provincia in c_provincia ( v_provincia ) loop
                v_name_prv := list_provincia. nombre;
            end loop;
            for list_distrito in c_distrito ( v_distrito ) loop
                v_name_dst := list_distrito. nombre;
            end loop;  
        end loop;
        if list_persona.tipo_solicitante = 'A' then
            v_solicitante := 'Asegurado';
        else
            v_solicitante := 'Derechohabiente';
        end if;
        dbms_output.put_line(RPAD(to_char(list_persona.dni),12) ||
        RPAD(v_solicitante,20) || RPAD(list_persona.nombreCompleto,40) ||
        list_persona.fecha_nac || '   '|| v_name_dst||','||v_name_prv 
        ||','||v_name_dpto);
    end loop;
end;
======================================================================================================================
create or replace NONEDITIONABLE procedure pr_procesar_prestacion(p_tipo_prestacion in char, p_id_solicitud in number)

is
    v_monto number:=0;
    v_fin_subsidio date:=sysdate;--FALTA UPDATE
    v_inicio_subsidio date:=sysdate;
    cursor c_id_solicitud is select id_solicitud from solicitud;
    v_id_solicitud number;
    solicitud_no_valida exception;
    v_id_tipo_prestacion char(11);
    v_sol_char CHAR(10);
begin
    v_sol_char := TO_CHAR(p_id_solicitud);
    -- validar solicitud
    open c_id_solicitud;
    loop
        fetch c_id_solicitud into v_id_solicitud;
        if c_id_solicitud%notfound then
            raise solicitud_no_valida;
            exit;
        end if;
        if v_id_solicitud=p_id_solicitud then
            exit;
        end if;
    end loop;
    close c_id_solicitud;
    -- insrtamos en prestaciones
    v_id_tipo_prestacion:=p_tipo_prestacion || to_char(p_id_solicitud);
    insert into prestacion_economica
    values (v_id_tipo_prestacion,p_id_solicitud,p_tipo_prestacion,v_monto,v_inicio_subsidio,v_fin_subsidio);
exception
    when solicitud_no_valida then
        dbms_output.put_line('No se procesa la prestacion: Ingrese un ID DE SOLICITUD valido');
end;
======================================================================================================================
create or replace NONEDITIONABLE procedure pr_procesar_solicitud(p_dni in number, p_ruc in number, 
                                                  p_tipo_prestacion in char)
is
    v_nun_sol NUMBER;
    v_tipo_solicitante char;
    v_id_solicitud number;
    v_ruc number;
    v_ruc_correcto number;
    v_id_prestacion char;
    no_existe_ruc exception;
    cursor c_ruc is select ruc from empleador;
    tipo_prestacion_invalido exception;
    ruc_no_coincide exception;
begin
    select count (*)  into v_nun_sol from solicitud;
    v_id_solicitud:=100+v_nun_sol;
    select tipo_solicitante into v_tipo_solicitante from persona where dni=p_dni;
    --select nvl(max(id_solicitud)+1,0) into v_id_solicitud from solicitud;
    open c_ruc;
    loop
        fetch c_ruc into v_ruc;
        if c_ruc%notfound then
            raise no_existe_ruc;
            exit;
        end if;
        if v_ruc=p_ruc then
            --con la function hallamos el ruc del asegurado con su p_dni y validos que sea igual al ruc ingreso, sino levantamos bandera
            v_ruc_correcto:=f_buscar_ruc_persona(p_dni);
            if v_ruc=v_ruc_correcto then
                exit;
            else
                raise ruc_no_coincide;
            end if;
        end if;
    end loop;
    close c_ruc;
    if p_tipo_prestacion<>'S' and p_tipo_prestacion<>'I' and p_tipo_prestacion<>'L' and 
        p_tipo_prestacion<>'M' then
        raise tipo_prestacion_invalido;
    end if;
    --Inseratmos en tabla solicitud
    insert into solicitud
    values(v_id_solicitud,v_tipo_solicitante,p_tipo_prestacion,p_dni,p_ruc);
exception
    when no_existe_ruc then
        dbms_output.put_line('No se procesa la solicitud: Ingrese un RUC valido');
    when tipo_prestacion_invalido then
        dbms_output.put_line('No se procesa la solicitud: Ingrese un tipo de solicitud valido');
    when ruc_no_coincide then
        dbms_output.put_line('No se procesa la solicitud: El RUC que ingresó no es correcto');
end;
======================================================================================================================
create or replace NONEDITIONABLE function f_buscar_ruc_persona(p_dni in number)
    return number
is
    v_ruc number;
    cursor c_asegurado is select dni_asegurado,ruc from asegurado;
    cursor c_derechoHabiente is select dni_derechohabiente,dni_asegurado from derechohabiente;
begin
    for list_asegurado in c_asegurado loop
        if list_asegurado.dni_asegurado=p_dni then
            return list_asegurado.ruc;
        end if;
    end loop;
    for list_derechoHabiente in  c_derechoHabiente loop
        if list_derechoHabiente.dni_derechohabiente=p_dni then
            select ruc into v_ruc from asegurado
            where dni_asegurado=list_derechoHabiente.dni_asegurado;
            return v_ruc;
        end if;
    end loop;
exception
    when no_data_found then
        dbms_output.put_line('El dni ingresado es incorrecto.');
end;
======================================================================================================================
create or replace NONEDITIONABLE function f_cantidad_asegurados_empresa(p_ruc in number)
    return number
is
    v_cantidad number:=0;
begin
    select count(*) into v_cantidad from asegurado
    where ruc=p_ruc;
    return v_cantidad;
end;
======================================================================================================================
create or replace NONEDITIONABLE function f_cantidad_derechohabientes_asegurado(p_dni_asegurado in number)
    return number
is
    v_cantidad number:=0;
begin
    select count(*) into v_cantidad from derechohabiente
    where dni_asegurado=p_dni_asegurado;
    return v_cantidad;
end;
======================================================================================================================
create or replace NONEDITIONABLE function f_monto_devolver_solicitud(p_id_solicitud in number)
    return number
is
    v_monto number:=0;
begin
    select monto into v_monto from prestacion_economica
    where p_id_solicitud=id_solicitud;
    return v_monto;
end;
======================================================================================================================