--FABIAN
create or replace function f_monto_devolver_solicitud(p_id_solicitud in number)
    return number
is
    v_monto number:=0;
begin
    select monto into v_monto from prestacion_economica
    where p_id_solicitud=id_solicitud;
    return v_monto;
end;

create or replace procedure pr_listadoPersonas
is
    cursor c_persona is select dni, tipo_solicitante, 
    nombres || ' ' || ape_pat || ' '||ape_mat nombreCompleto,
    fecha_nac, direccion,id_ubigeo from persona;
    
    cursor c_ubigeo(p_id_ubigeo number) is select id_departamento, id_provincia,
    id_distrito from ubigeo where p_id_ubigeo = id_ubigeo;
    
    cursor c_departamento ( p_id_departamento number) is select nombre from
    departamento where p_id_departamento = id_departamento;
    
    cursor c_provincia ( p_id_provincia number) is select nombre from
    provincia where p_id_provincia = id_provincia;
    
    cursor c_distrito ( p_id_distrito number) is select nombre from
    distrito where p_id_distrito = id_distrito;
    
    v_ubigeo number;
    v_provincia number;
    v_departamento number;
    v_distrito number;
    v_name_dpto varchar2(150);
    v_name_prv varchar2(150);
    v_name_dst varchar2(150);
    v_solicitante varchar2(15);
begin
    for list_persona in c_persona loop
        v_ubigeo := list_persona.id_ubigeo;
        for list_ubigeo in c_ubigeo(v_ubigeo) loop
            v_provincia := list_ubigeo.id_provincia;
            v_departamento := list_ubigeo. id_departamento;
            v_distrito := list_ubigeo.id_distrito;
            for list_departamento in c_departamento (v_departamento ) loop
                v_name_dpto := list_departamento.nombre;
            end loop;
            for list_provincia in c_provincia ( v_provincia ) loop
                v_name_prv := list_provincia. nombre;
            end loop;
            for list_distrito in c_distrito ( v_distrito ) loop
                v_name_dst := list_distrito. nombre;
            end loop;  
        end loop;
        if list_persona.tipo_solicitante = 'A' then
            v_solicitante := 'Asegurado';
        else
            v_solicitante := 'Derechohabiente';
        end if;
        dbms_output.put_line(RPAD(to_char(list_persona.dni),12) ||
        RPAD(v_solicitante,20) || RPAD(list_persona.nombreCompleto,40) ||
        list_persona.fecha_nac || '   '|| v_name_dst||','||v_name_prv 
        ||','||v_name_dpto);
    end loop;
end;



create or replace procedure pr_procesar_solicitud(p_dni in number, p_ruc in number, 
                                                  p_tipo_prestacion in char)
is
    v_tipo_solicitante char;
    v_id_solicitud number;
    v_ruc number;
    v_ruc_correcto number;
    v_id_prestacion char;
    no_existe_ruc exception;
    cursor c_ruc is select ruc from empleador;
    tipo_prestacion_invalido exception;
    ruc_no_coincide exception;
begin
    select tipo_solicitante into v_tipo_solicitante from persona where dni=p_dni;
    select nvl(max(id_solicitud)+1,0) into v_id_solicitud from solicitud;
    open c_ruc;
    loop
        fetch c_ruc into v_ruc;
        if c_ruc%notfound then
            raise no_existe_ruc;
            exit;
        end if;
        if v_ruc=p_ruc then
            --con la function hallamos el ruc del asegurado con su p_dni y validos que sea igual al ruc ingreso, sino levantamos bandera
            v_ruc_correcto:=f_buscar_ruc_persona(p_dni);
            if v_ruc=v_ruc_correcto then
                exit;
            else
                raise ruc_no_coincide;
            end if;
        end if;
    end loop;
    close c_ruc;
    if p_tipo_prestacion<>'S' and p_tipo_prestacion<>'I' and p_tipo_prestacion<>'L' and 
        p_tipo_prestacion<>'M' then
        raise tipo_prestacion_invalido;
    end if;
    --Inseratmos en tabla solicitud
    insert into solicitud
    values(v_id_solicitud,v_tipo_solicitante,v_id_prestacion,p_dni,p_ruc);
exception
    when no_existe_ruc then
        dbms_output.put_line('No se procesa la solicitud: Ingrese un RUC valido');
    when tipo_prestacion_invalido then
        dbms_output.put_line('No se procesa la solicitud: Ingrese un tipo de solicitud valido');
    when ruc_no_coincide then
        dbms_output.put_line('No se procesa la solicitud: El RUC que ingresÃ³ no es correcto');
end;


create or replace procedure pr_procesar_prestacion(p_tipo_prestacion in char, p_id_solicitud in number)

is
    v_monto number:=0;
    v_fin_subsidio date:=sysdate;--FALTA UPDATE
    v_inicio_subsidio date:=sysdate;
    cursor c_id_solicitud is select id_solicitud from solicitud;
    v_id_solicitud number;
    solicitud_no_valida exception;
    v_id_tipo_prestacion char;
begin
    -- validar solicitud
    open c_id_solicitud;
    loop
        fetch c_id_solicitud into v_id_solicitud;
        if c_id_solicitud%notfound then
            raise solicitud_no_valida;
            exit;
        end if;
        if v_id_solicitud=p_id_solicitud then
            exit;
        end if;
    end loop;
    close c_id_solicitud;
    -- insrtamos en prestaciones
    v_id_tipo_prestacion:=p_tipo_prestacion || to_char(p_id_solicitud);
    insert into prestacion_economica
    values (v_id_tipo_prestacion,p_id_solicitud,p_tipo_prestacion,v_monto,v_inicio_subsidio,v_fin_subsidio);
exception
    when solicitud_no_valida then
        dbms_output.put_line('No se procesa la prestacion: Ingrese un ID DE SOLICITUD valido');
end;

create or replace trigger tr_actualizar_prestacion_sepelio
after insert 
on boleta
for each row
declare
    v_monto number;
begin
    select monto into v_monto from prestacion_economica 
    where :new.id_tipo_prestacion=id_tipo_prestacion;
    if v_monto+:new.importe>=3000 then
        v_monto:=3000;
    else
        v_monto:=v_monto+:new.importe;
    end if;
    update prestacion_economica set monto=v_monto 
    where :new.id_tipo_prestacion=id_tipo_prestacion;
end;

select * from asegurado;